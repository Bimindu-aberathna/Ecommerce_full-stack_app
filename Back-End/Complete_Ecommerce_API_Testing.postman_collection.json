{
  "info": {
    "name": "Complete E-commerce API Testing Collection",
    "description": "Comprehensive testing collection for Categories, Subcategories, and Products with proper hierarchical validation",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string",
      "description": "Base URL for the API"
    },
    {
      "key": "token",
      "value": "",
      "type": "string",
      "description": "Authentication token"
    },
    {
      "key": "adminToken",
      "value": "",
      "type": "string",
      "description": "Admin authentication token"
    },
    {
      "key": "categoryId",
      "value": "",
      "type": "string",
      "description": "Category ID for testing"
    },
    {
      "key": "subCategoryId",
      "value": "",
      "type": "string",
      "description": "Subcategory ID for testing"
    },
    {
      "key": "productId",
      "value": "",
      "type": "string",
      "description": "Product ID for testing"
    },
    {
      "key": "varietyId",
      "value": "",
      "type": "string",
      "description": "Product variety ID for testing"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication Setup",
      "item": [
        {
          "name": "Register Admin User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.success && responseJson.data.token) {",
                  "        pm.collectionVariables.set('adminToken', responseJson.data.token);",
                  "        console.log('Admin token saved:', responseJson.data.token);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Admin\",\n  \"lastName\": \"User\",\n  \"email\": \"admin@test.com\",\n  \"password\": \"Admin123!\",\n  \"role\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "Login Admin User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.success && responseJson.data.token) {",
                  "        pm.collectionVariables.set('adminToken', responseJson.data.token);",
                  "        console.log('Admin login successful, token saved');",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@test.com\",\n  \"password\": \"Admin123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "üìÇ Category Management",
      "item": [
        {
          "name": "Get All Categories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has categories array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/categories",
              "host": ["{{baseUrl}}"],
              "path": ["api", "categories"]
            }
          }
        },
        {
          "name": "Create Category - Electronics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.success && responseJson.data.id) {",
                  "        pm.collectionVariables.set('categoryId', responseJson.data.id);",
                  "        console.log('Category created with ID:', responseJson.data.id);",
                  "    }",
                  "}",
                  "",
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Category created successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('name');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Electronics\",\n  \"image\": \"https://example.com/images/electronics.jpg\",\n  \"isActive\": true,\n  \"sortOrder\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/categories",
              "host": ["{{baseUrl}}"],
              "path": ["api", "categories"]
            }
          }
        },
        {
          "name": "Create Category - Validation Error",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has validation errors', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"A\",\n  \"image\": \"invalid-url\",\n  \"sortOrder\": -1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/categories",
              "host": ["{{baseUrl}}"],
              "path": ["api", "categories"]
            }
          }
        },
        {
          "name": "Create Category - Duplicate Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response indicates duplicate name', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.message).to.include('already exists');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Electronics\",\n  \"image\": \"https://example.com/images/electronics2.jpg\",\n  \"isActive\": true,\n  \"sortOrder\": 2\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/categories",
              "host": ["{{baseUrl}}"],
              "path": ["api", "categories"]
            }
          }
        },
        {
          "name": "Get Category by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Category has subcategories array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('subCategories');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/categories/{{categoryId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "categories", "{{categoryId}}"]
            }
          }
        },
        {
          "name": "Update Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Category updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Electronics Updated\",\n  \"image\": \"https://example.com/images/electronics-updated.jpg\",\n  \"isActive\": true,\n  \"sortOrder\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/categories/{{categoryId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "categories", "{{categoryId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "üìÅ Subcategory Management",
      "item": [
        {
          "name": "Get All Subcategories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has subcategories array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/subcategories",
              "host": ["{{baseUrl}}"],
              "path": ["api", "subcategories"]
            }
          }
        },
        {
          "name": "Get Subcategories by Category",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/subcategories?categoryId={{categoryId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "subcategories"],
              "query": [
                {
                  "key": "categoryId",
                  "value": "{{categoryId}}"
                }
              ]
            }
          }
        },
        {
          "name": "Create Subcategory - Smartphones",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.success && responseJson.data.id) {",
                  "        pm.collectionVariables.set('subCategoryId', responseJson.data.id);",
                  "        console.log('Subcategory created with ID:', responseJson.data.id);",
                  "    }",
                  "}",
                  "",
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Subcategory created successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('category');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Smartphones\",\n  \"image\": \"https://example.com/images/smartphones.jpg\",\n  \"isActive\": true,\n  \"sortOrder\": 1,\n  \"categoryId\": {{categoryId}}\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/subcategories",
              "host": ["{{baseUrl}}"],
              "path": ["api", "subcategories"]
            }
          }
        },
        {
          "name": "Create Subcategory - Invalid Category ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response indicates invalid category', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.message).to.include('Invalid category ID');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Invalid Subcategory\",\n  \"image\": \"https://example.com/images/test.jpg\",\n  \"isActive\": true,\n  \"sortOrder\": 1,\n  \"categoryId\": 99999\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/subcategories",
              "host": ["{{baseUrl}}"],
              "path": ["api", "subcategories"]
            }
          }
        },
        {
          "name": "Create Subcategory - Without Category (Validation Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has validation errors', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Orphan Subcategory\",\n  \"image\": \"https://example.com/images/test.jpg\",\n  \"isActive\": true,\n  \"sortOrder\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/subcategories",
              "host": ["{{baseUrl}}"],
              "path": ["api", "subcategories"]
            }
          }
        },
        {
          "name": "Get Subcategory by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Subcategory has parent category', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('category');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/subcategories/{{subCategoryId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "subcategories", "{{subCategoryId}}"]
            }
          }
        },
        {
          "name": "Update Subcategory",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Subcategory updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Smartphones Updated\",\n  \"image\": \"https://example.com/images/smartphones-updated.jpg\",\n  \"isActive\": true,\n  \"sortOrder\": 1,\n  \"categoryId\": {{categoryId}}\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/subcategories/{{subCategoryId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "subcategories", "{{subCategoryId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "üì± Product Management",
      "item": [
        {
          "name": "Get All Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination info', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('pagination');",
                  "    pm.expect(responseJson.data).to.have.property('products');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            }
          }
        },
        {
          "name": "Create Product - Success (With Valid Subcategory)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.success && responseJson.data.id) {",
                  "        pm.collectionVariables.set('productId', responseJson.data.id);",
                  "        if (responseJson.data.varieties && responseJson.data.varieties.length > 0) {",
                  "            pm.collectionVariables.set('varietyId', responseJson.data.varieties[0].id);",
                  "        }",
                  "        console.log('Product created with ID:', responseJson.data.id);",
                  "    }",
                  "}",
                  "",
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Product has required hierarchical relationships', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('subCategory');",
                  "    pm.expect(responseJson.data.subCategory).to.have.property('category');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Samsung Galaxy S24\",\n  \"description\": \"Latest Samsung flagship smartphone with advanced features and high-quality camera system. Perfect for professional photography and everyday use.\",\n  \"price\": 999.99,\n  \"originalPrice\": 1199.99,\n  \"subCategoryId\": {{subCategoryId}},\n  \"brand\": \"Samsung\",\n  \"sku\": \"SAM-S24-001\",\n  \"images\": [\n    {\n      \"url\": \"https://example.com/images/samsung-s24-1.jpg\",\n      \"type\": \"image\",\n      \"isPrimary\": true\n    },\n    {\n      \"url\": \"https://example.com/images/samsung-s24-2.jpg\",\n      \"type\": \"image\",\n      \"isPrimary\": false\n    }\n  ],\n  \"tags\": [\"smartphone\", \"android\", \"5G\", \"camera\"],\n  \"weight\": 168.5,\n  \"warranty\": \"2 years manufacturer warranty\",\n  \"isFeatured\": true,\n  \"varieties\": [\n    {\n      \"name\": \"128GB - Black\",\n      \"stock\": 50,\n      \"preorderLevel\": 10\n    },\n    {\n      \"name\": \"256GB - Silver\",\n      \"stock\": 30,\n      \"preorderLevel\": 5\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            }
          }
        },
        {
          "name": "Create Product - Without Subcategory (Must Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response indicates validation error', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Orphan Product\",\n  \"description\": \"This product has no subcategory and should fail\",\n  \"price\": 100.00,\n  \"brand\": \"Test Brand\",\n  \"sku\": \"ORPHAN-001\",\n  \"images\": [\n    {\n      \"url\": \"https://example.com/images/test.jpg\",\n      \"type\": \"image\",\n      \"isPrimary\": true\n    }\n  ],\n  \"weight\": 100,\n  \"varieties\": [\n    {\n      \"name\": \"Standard\",\n      \"stock\": 10\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            }
          }
        },
        {
          "name": "Create Product - Invalid Subcategory ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response indicates invalid subcategory', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.message).to.include('Invalid subcategory ID');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Invalid Product\",\n  \"description\": \"This product has invalid subcategory ID\",\n  \"price\": 100.00,\n  \"subCategoryId\": 99999,\n  \"brand\": \"Test Brand\",\n  \"sku\": \"INVALID-001\",\n  \"images\": [\n    {\n      \"url\": \"https://example.com/images/test.jpg\",\n      \"type\": \"image\",\n      \"isPrimary\": true\n    }\n  ],\n  \"weight\": 100,\n  \"varieties\": [\n    {\n      \"name\": \"Standard\",\n      \"stock\": 10\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            }
          }
        },
        {
          "name": "Get Product by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Product has complete hierarchy', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('subCategory');",
                  "    pm.expect(responseJson.data.subCategory).to.have.property('category');",
                  "    pm.expect(responseJson.data).to.have.property('varieties');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}"]
            }
          }
        },
        {
          "name": "Get Featured Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('All products are featured', function () {",
                  "    const responseJson = pm.response.json();",
                  "    responseJson.data.forEach(product => {",
                  "        pm.expect(product.isFeatured).to.be.true;",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/featured/all?limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "featured", "all"],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Update Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Product updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Samsung Galaxy S24 Updated\",\n  \"description\": \"Updated description with new features.\",\n  \"price\": 899.99\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}"]
            }
          }
        },
        {
          "name": "Delete Category with Subcategories (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This test checks if category deletion is properly handled when it has subcategories",
                  "pm.test('Category deletion handled properly', function () {",
                  "    // The response can be 200 (soft delete) or 400 (if cascade protection is implemented)",
                  "    pm.expect([200, 400]).to.include(pm.response.code);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/categories/{{categoryId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "categories", "{{categoryId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "üîí Hierarchical Validation Tests",
      "item": [
        {
          "name": "Test Category-Subcategory Relationship",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Subcategories belong to correct category', function () {",
                  "    const responseJson = pm.response.json();",
                  "    responseJson.data.forEach(subcategory => {",
                  "        pm.expect(subcategory).to.have.property('category');",
                  "        pm.expect(subcategory.categoryId).to.eql(parseInt(pm.collectionVariables.get('categoryId')));",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/subcategories?categoryId={{categoryId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "subcategories"],
              "query": [
                {
                  "key": "categoryId",
                  "value": "{{categoryId}}"
                }
              ]
            }
          }
        },
        {
          "name": "Test Subcategory-Product Relationship",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Products belong to valid subcategory', function () {",
                  "    const responseJson = pm.response.json();",
                  "    responseJson.data.products.forEach(product => {",
                  "        pm.expect(product).to.have.property('subCategory');",
                  "        pm.expect(product.subCategory).to.have.property('category');",
                  "        pm.expect(product.subCategoryId).to.be.a('number');",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products?subCategory={{subCategoryId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"],
              "query": [
                {
                  "key": "subCategory",
                  "value": "{{subCategoryId}}"
                }
              ]
            }
          }
        },
        {
          "name": "Verify Complete Hierarchy - Category ‚Üí Subcategory ‚Üí Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Complete hierarchy exists', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('subCategory');",
                  "    pm.expect(responseJson.data.subCategory).to.have.property('category');",
                  "    pm.expect(responseJson.data.subCategory.category).to.have.property('name');",
                  "    pm.expect(responseJson.data.subCategory).to.have.property('name');",
                  "    pm.expect(responseJson.data).to.have.property('name');",
                  "    console.log('Hierarchy:', responseJson.data.subCategory.category.name, '‚Üí', responseJson.data.subCategory.name, '‚Üí', responseJson.data.name);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}"]
            }
          }
        }
      ]
    }
  ]
}
