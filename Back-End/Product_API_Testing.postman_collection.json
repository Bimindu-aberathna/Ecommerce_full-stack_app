{
  "info": {
    "name": "Complete E-commerce API Testing Collection",
    "description": "Comprehensive testing collection for Categories, Subcategories, and Products with proper hierarchical validation",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string",
      "description": "Base URL for the API"
    },
    {
      "key": "token",
      "value": "",
      "type": "string",
      "description": "Authentication token"
    },
    {
      "key": "adminToken",
      "value": "",
      "type": "string",
      "description": "Admin authentication token"
    },
    {
      "key": "categoryId",
      "value": "",
      "type": "string",
      "description": "Category ID for testing"
    },
    {
      "key": "subCategoryId",
      "value": "",
      "type": "string",
      "description": "Subcategory ID for testing"
    },
    {
      "key": "productId",
      "value": "",
      "type": "string",
      "description": "Product ID for testing"
    },
    {
      "key": "varietyId",
      "value": "",
      "type": "string",
      "description": "Product variety ID for testing"
    }
  ],
  "item": [
    {
      "name": "Authentication Setup",
      "item": [
        {
          "name": "Register Admin User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.success && responseJson.data.token) {",
                  "        pm.collectionVariables.set('adminToken', responseJson.data.token);",
                  "        console.log('Admin token saved:', responseJson.data.token);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Admin\",\n  \"lastName\": \"User\",\n  \"email\": \"admin@test.com\",\n  \"password\": \"Admin123!\",\n  \"role\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "Login Admin User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.success && responseJson.data.token) {",
                  "        pm.collectionVariables.set('adminToken', responseJson.data.token);",
                  "        console.log('Admin login successful, token saved');",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@test.com\",\n  \"password\": \"Admin123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        },
        {
          "name": "Register Regular User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.success && responseJson.data.token) {",
                  "        pm.collectionVariables.set('token', responseJson.data.token);",
                  "        console.log('User token saved:', responseJson.data.token);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Regular\",\n  \"lastName\": \"User\",\n  \"email\": \"user@test.com\",\n  \"password\": \"User123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          }
        }
      ]
    },
    {
      "name": "Product CRUD Operations",
      "item": [
        {
          "name": "Create Product - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.success && responseJson.data.id) {",
                  "        pm.collectionVariables.set('productId', responseJson.data.id);",
                  "        if (responseJson.data.varieties && responseJson.data.varieties.length > 0) {",
                  "            pm.collectionVariables.set('varietyId', responseJson.data.varieties[0].id);",
                  "        }",
                  "        console.log('Product created with ID:', responseJson.data.id);",
                  "    }",
                  "}",
                  "",
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Product has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('name');",
                  "    pm.expect(responseJson.data).to.have.property('sku');",
                  "    pm.expect(responseJson.data).to.have.property('varieties');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Samsung Galaxy S24\",\n  \"description\": \"Latest Samsung flagship smartphone with advanced features and high-quality camera system. Perfect for professional photography and everyday use.\",\n  \"price\": 999.99,\n  \"originalPrice\": 1199.99,\n  \"subCategoryId\": {{subCategoryId}},\n  \"brand\": \"Samsung\",\n  \"sku\": \"SAM-S24-001\",\n  \"images\": [\n    {\n      \"url\": \"https://example.com/images/samsung-s24-1.jpg\",\n      \"type\": \"image\",\n      \"isPrimary\": true\n    },\n    {\n      \"url\": \"https://example.com/images/samsung-s24-2.jpg\",\n      \"type\": \"image\",\n      \"isPrimary\": false\n    }\n  ],\n  \"tags\": [\"smartphone\", \"android\", \"5G\", \"camera\"],\n  \"weight\": 168.5,\n  \"warranty\": \"2 years manufacturer warranty\",\n  \"isFeatured\": true,\n  \"varieties\": [\n    {\n      \"name\": \"128GB - Black\",\n      \"stock\": 50,\n      \"preorderLevel\": 10\n    },\n    {\n      \"name\": \"256GB - Silver\",\n      \"stock\": 30,\n      \"preorderLevel\": 5\n    },\n    {\n      \"name\": \"512GB - Gold\",\n      \"stock\": 20,\n      \"preorderLevel\": 3\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            }
          }
        },
        {
          "name": "Create Product - Validation Error (Missing Required Fields)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has validation errors', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.message).to.include('Validation failed');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"A\",\n  \"description\": \"Short\",\n  \"price\": -10,\n  \"subCategoryId\": \"invalid\",\n  \"sku\": \"\",\n  \"weight\": -5,\n  \"varieties\": []\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            }
          }
        },
        {
          "name": "Create Product - Duplicate SKU",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response indicates duplicate SKU', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.message).to.include('SKU already exists');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Duplicate Product\",\n  \"description\": \"This product has a duplicate SKU\",\n  \"price\": 500.00,\n  \"subCategoryId\": {{subCategoryId}},\n  \"brand\": \"Test Brand\",\n  \"sku\": \"SAM-S24-001\",\n  \"images\": [\n    {\n      \"url\": \"https://example.com/images/test.jpg\",\n      \"type\": \"image\",\n      \"isPrimary\": true\n    }\n  ],\n  \"weight\": 100,\n  \"varieties\": [\n    {\n      \"name\": \"Test Variety\",\n      \"stock\": 10,\n      \"preorderLevel\": 2\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            }
          }
        },
        {
          "name": "Create Product - Unauthorized (No Token)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response indicates unauthorized', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.message).to.include('Access denied');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Unauthorized Product\",\n  \"description\": \"This should fail due to no authentication\",\n  \"price\": 100.00,\n  \"subCategoryId\": {{subCategoryId}},\n  \"sku\": \"UNAUTH-001\",\n  \"weight\": 50,\n  \"varieties\": [\n    {\n      \"name\": \"Test\",\n      \"stock\": 5\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            }
          }
        },
        {
          "name": "Create Product - Forbidden (Regular User)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 403', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Response indicates forbidden', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.message).to.include('Admin privileges required');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Forbidden Product\",\n  \"description\": \"This should fail due to insufficient privileges\",\n  \"price\": 100.00,\n  \"subCategoryId\": {{subCategoryId}},\n  \"sku\": \"FORBID-001\",\n  \"weight\": 50,\n  \"varieties\": [\n    {\n      \"name\": \"Test\",\n      \"stock\": 5\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            }
          }
        }
      ]
    },
    {
      "name": "Product Read Operations",
      "item": [
        {
          "name": "Get All Products - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has pagination info', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('pagination');",
                  "    pm.expect(responseJson.data).to.have.property('products');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            }
          }
        },
        {
          "name": "Get Products with Pagination",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Pagination parameters are correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.pagination.currentPage).to.eql(1);",
                  "    pm.expect(responseJson.data.pagination.itemsPerPage).to.eql(5);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products?page=1&limit=5",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "5"
                }
              ]
            }
          }
        },
        {
          "name": "Get Products with Search",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products?search=Samsung",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"],
              "query": [
                {
                  "key": "search",
                  "value": "Samsung"
                }
              ]
            }
          }
        },
        {
          "name": "Get Products with Price Filter",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products?minPrice=500&maxPrice=1500",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"],
              "query": [
                {
                  "key": "minPrice",
                  "value": "500"
                },
                {
                  "key": "maxPrice",
                  "value": "1500"
                }
              ]
            }
          }
        },
        {
          "name": "Get Products with Multiple Filters",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products?brand=Samsung&isActive=true&isFeatured=true&sortBy=price&sortOrder=ASC",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"],
              "query": [
                {
                  "key": "brand",
                  "value": "Samsung"
                },
                {
                  "key": "isActive",
                  "value": "true"
                },
                {
                  "key": "isFeatured",
                  "value": "true"
                },
                {
                  "key": "sortBy",
                  "value": "price"
                },
                {
                  "key": "sortOrder",
                  "value": "ASC"
                }
              ]
            }
          }
        },
        {
          "name": "Get Product by ID - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Product has all associations', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('varieties');",
                  "    pm.expect(responseJson.data).to.have.property('subCategory');",
                  "    pm.expect(responseJson.data).to.have.property('createdBy');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}"]
            }
          }
        },
        {
          "name": "Get Product by ID - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response indicates not found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.message).to.include('Product not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/99999",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "99999"]
            }
          }
        },
        {
          "name": "Get Featured Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('All products are featured', function () {",
                  "    const responseJson = pm.response.json();",
                  "    responseJson.data.forEach(product => {",
                  "        pm.expect(product.isFeatured).to.be.true;",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/featured/all?limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "featured", "all"],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Get Search Suggestions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Suggestions are relevant', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/search/suggestions?q=Sam&limit=5",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "search", "suggestions"],
              "query": [
                {
                  "key": "q",
                  "value": "Sam"
                },
                {
                  "key": "limit",
                  "value": "5"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Product Update Operations",
      "item": [
        {
          "name": "Update Product - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Product updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.message).to.include('updated successfully');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Samsung Galaxy S24 Updated\",\n  \"description\": \"Updated description with new features and improved performance.\",\n  \"price\": 899.99,\n  \"originalPrice\": 1099.99,\n  \"brand\": \"Samsung Electronics\",\n  \"warranty\": \"3 years extended warranty\",\n  \"isFeatured\": false,\n  \"varieties\": [\n    {\n      \"name\": \"128GB - Black\",\n      \"stock\": 45,\n      \"preorderLevel\": 8\n    },\n    {\n      \"name\": \"256GB - Silver\",\n      \"stock\": 35,\n      \"preorderLevel\": 7\n    },\n    {\n      \"name\": \"512GB - Gold\",\n      \"stock\": 25,\n      \"preorderLevel\": 5\n    },\n    {\n      \"name\": \"1TB - Titanium\",\n      \"stock\": 15,\n      \"preorderLevel\": 3\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}"]
            }
          }
        },
        {
          "name": "Update Product - Validation Error",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has validation errors', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"A\",\n  \"price\": -100,\n  \"weight\": -50\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}"]
            }
          }
        },
        {
          "name": "Update Product - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response indicates not found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.message).to.include('Product not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Product\",\n  \"price\": 500.00\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products/99999",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "99999"]
            }
          }
        },
        {
          "name": "Toggle Product Active Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Active status toggled', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('isActive');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}/toggle-active",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}", "toggle-active"]
            }
          }
        },
        {
          "name": "Toggle Product Featured Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Featured status toggled', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('isFeatured');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}/toggle-featured",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}", "toggle-featured"]
            }
          }
        },
        {
          "name": "Update Product Stock",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Stock updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('newStock');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"varietyId\": {{varietyId}},\n  \"quantity\": 10\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}/stock",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}", "stock"]
            }
          }
        }
      ]
    },
    {
      "name": "Product Delete Operations",
      "item": [
        {
          "name": "Soft Delete Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Product deleted successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.message).to.include('deleted successfully');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}"]
            }
          }
        },
        {
          "name": "Permanent Delete Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Product permanently deleted', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.message).to.include('permanently deleted');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}/permanent",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}", "permanent"]
            }
          }
        },
        {
          "name": "Delete Product - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response indicates not found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.message).to.include('Product not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/products/99999",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "99999"]
            }
          }
        }
      ]
    },
    {
      "name": "Authorization & Security Tests",
      "item": [
        {
          "name": "Access Protected Route Without Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response indicates unauthorized', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.message).to.include('Access denied');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Product\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            }
          }
        },
        {
          "name": "Access Admin Route with Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response indicates invalid token', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.message).to.include('Token is not valid');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer invalid-token-here"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Product\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            }
          }
        },
        {
          "name": "Access Admin Route with Regular User Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 403', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Response indicates insufficient privileges', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.message).to.include('Admin privileges required');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Product\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "1"]
            }
          }
        }
      ]
    },
    {
      "name": "Edge Cases & Error Handling",
      "item": [
        {
          "name": "Create Product with Multiple Primary Images",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response indicates multiple primary images error', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.message).to.include('Multiple primary images are not allowed');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Multiple Primary Images Product\",\n  \"description\": \"This product has multiple primary images which should fail validation\",\n  \"price\": 299.99,\n  \"subCategoryId\": {{subCategoryId}},\n  \"brand\": \"Test Brand\",\n  \"sku\": \"MULTI-PRIMARY-001\",\n  \"images\": [\n    {\n      \"url\": \"https://example.com/images/primary1.jpg\",\n      \"type\": \"image\",\n      \"isPrimary\": true\n    },\n    {\n      \"url\": \"https://example.com/images/primary2.jpg\",\n      \"type\": \"image\",\n      \"isPrimary\": true\n    }\n  ],\n  \"weight\": 100,\n  \"varieties\": [\n    {\n      \"name\": \"Standard\",\n      \"stock\": 10,\n      \"preorderLevel\": 2\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"]
            }
          }
        },
        {
          "name": "Get Products with Invalid Sort Field",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Invalid sort field defaults to createdAt', function () {",
                  "    // Should still return results with default sorting",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products?sortBy=invalidField&sortOrder=DESC",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products"],
              "query": [
                {
                  "key": "sortBy",
                  "value": "invalidField"
                },
                {
                  "key": "sortOrder",
                  "value": "DESC"
                }
              ]
            }
          }
        },
        {
          "name": "Update Stock with Invalid Variety ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response indicates variety not found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.message).to.include('Product variety not found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"varietyId\": 99999,\n  \"quantity\": 10\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}/stock",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "{{productId}}", "stock"]
            }
          }
        },
        {
          "name": "Search Suggestions with Short Query",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Returns empty array for short query', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.be.an('array').that.is.empty;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/products/search/suggestions?q=a",
              "host": ["{{baseUrl}}"],
              "path": ["api", "products", "search", "suggestions"],
              "query": [
                {
                  "key": "q",
                  "value": "a"
                }
              ]
            }
          }
        }
      ]
    }
  ]
}
